import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import RidgeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.svm import LinearSVC
from sklearn.metrics import auc
from sklearn.metrics import plot_roc_curve
from sklearn.metrics import auc, classification_report, confusion_matrix
from sklearn.model_selection import train_test_split


def evaluate(model,X_test,y_test):
    model.fit(X_train_scaled,y_train)
    plot_roc_curve(model, X_test_scaled, y_test,name='ROC Curve', lw=1)
    y_pred = model.predict(X_test_scaled)
    print('Classification Report \n',classification_report(y_test, y_pred))
    print('Confusion matrix \n',confusion_matrix(y_test, y_pred))
    
    
# DATA    
X = np.load('data/X_Dataset_III.npy')
y = np.load('data/Y.npy')


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4,random_state=123)

scaler = StandardScaler().fit(X_train)
# some models require a scaled data
X_train_scaled = scaler.transform(X_train)
X_test_scaled = scaler.transform(X_test)

# 1
# Random Forest
model = RandomForestClassifier(n_estimators=200, class_weight='balanced')
evaluate(model,X_test,y_test)


# LinearSVC
model = LinearSVC(class_weight='balanced',max_iter=10000)
evaluate(model,X_test_scaled,y_test)

# Logistic Regression
model = LogisticRegression(class_weight='balanced')
evaluate(model,X_test_scaled,y_test)


# Adaboost
from sklearn.datasets import make_classification
from sklearn.ensemble import AdaBoostClassifier
model = classifier = AdaBoostClassifier()
evaluate(model,X_test,y_test)


# 2 we are using the code from  https://scikit-learn.org
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import RidgeClassifier
from sklearn.metrics import auc
from sklearn.metrics import plot_roc_curve
from sklearn.model_selection import StratifiedKFold



def roc_with_cv(X,y,n_splits = 10):
    cv = StratifiedKFold(n_splits=6)
    tprs = []
    aucs = []
    mean_fpr = np.linspace(0, 1, 100)
    fig, ax = plt.subplots()
    for i, (train, test) in enumerate(cv.split(X, y)):
        classifier.fit(X[train], y[train])
        viz = plot_roc_curve(classifier, X[test], y[test],
                             name='ROC fold {}'.format(i),
                             alpha=0.3, lw=1, ax=ax)
        interp_tpr = np.interp(mean_fpr, viz.fpr, viz.tpr)
        interp_tpr[0] = 0.0
        tprs.append(interp_tpr)
        aucs.append(viz.roc_auc)

    ax.plot([0, 1], [0, 1], linestyle='--', lw=2, color='r',
            label='Chance', alpha=.8)

    mean_tpr = np.mean(tprs, axis=0)
    mean_tpr[-1] = 1.0
    mean_auc = auc(mean_fpr, mean_tpr)
    std_auc = np.std(aucs)
    ax.plot(mean_fpr, mean_tpr, color='b',
            label=r'Mean ROC (AUC = %0.2f $\pm$ %0.2f)' % (mean_auc, std_auc),
            lw=2, alpha=.8)

    std_tpr = np.std(tprs, axis=0)
    tprs_upper = np.minimum(mean_tpr + std_tpr, 1)
    tprs_lower = np.maximum(mean_tpr - std_tpr, 0)
    ax.fill_between(mean_fpr, tprs_lower, tprs_upper, color='grey', alpha=.2,
                    label=r'$\pm$ 1 std. dev.')

    ax.set(xlim=[-0.05, 1.05], ylim=[-0.05, 1.05],
           title="Receiver operating characteristic example")
    ax.legend(loc="lower right")
    plt.show()
    
    
classifier = RidgeClassifier(alpha=1, class_weight='balanced')
    
    
X = np.load('data1/X_Dataset1_III.npy')
y = np.load('data1/Y.npy')
roc_with_cv(X,y)

